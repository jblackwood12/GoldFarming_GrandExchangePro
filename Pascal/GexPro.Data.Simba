var ACCOUNT_ID: integer;
type item_ID_array = array [1..3] of integer; //This is used as a unique identifier per item
type boughtSoFar_array = array [1..3] of integer;

function ReadUserData(linenumber: integer): string;
var
s: string;
the_file: integer;
temp_strings: TStringArray;
begin
    Result := '';
    if (FileExists('C:/Simba/Scripts/UserData.txt')) then
    begin
      the_file := OpenFile('C:/Simba/Scripts/UserData.txt',True);
      if(the_file <> -1)then
      begin
        ReadFileString(the_file, s, FileSize(the_file));
        CloseFile(the_file);
        temp_strings := Explode(#13#10,s);
        Result := temp_strings[linenumber];
      end;
    end;
end;

function ReadSavedPrices(linenumber: integer): string;
var
s: string;
the_file: integer;
temp_strings: TStringArray;
begin
    Result := '';
    if (FileExists('C:/Simba/Scripts/savedprices.txt')) then
    begin
      the_file := OpenFile('C:/Simba/Scripts/savedprices.txt',True);
      if(the_file <> -1)then
      begin
        ReadFileString(the_file, s, FileSize(the_file));
        CloseFile(the_file);
        temp_strings := Explode(#13#10,s);
        Result := temp_strings[linenumber];
      end;
    end;
end;

//This is used to keep track of the most recent update times
type latest_Update_time_array = array [1..100] of  integer;
//Finds an item randomly that isn't one of the current ones we are buying/selling
//Returns: the itemID, itemName, itemLimit, buy_price, sell_price, clickPosition
//NOTE:  clickPosition determines what slot we click on in the GE item search page
//PARAMETERS: all of the items you are currently buying/selling
function GetNewItem(item1ID, item2ID, item3ID, itemIDToBeReplaced: integer; latestTimes : latest_Update_time_array): string;
var
s, random_string: string;
the_file, random_number, chosen_index_of_item, I: integer;
temp_strings, tested_item: TStringArray;
tested_itemID: integer;
time_difference: integer;
num_tries: integer;
itemInInventory: Boolean;
itemIDFoundInInventory: integer;

begin
    itemInInventory := False;


    //Scan our inventory for items
      //If we find an item, determine the itemID
      //Return the item information corresponding to that itemID
         //Else, follow the normal procedure to get new items

    for I:=0 to 24 do  //THIS NUMBER SHOULD GO UP TO AS MANY ITEMS WE HAVE
    begin
         if not itemInInventory then //If we haven't found an item, keep looking
         begin
             itemInInventory := isItemInInv(I, false);

             if itemInInventory then  //If we found an item, save the itemID
             begin
                 itemIDFoundInInventory := I;
             end;
         end;
    end;

    Result := '';
    chosen_index_of_item := -1;
    tested_itemID := -1;
    I := 0;

      //Try 3 times to read the file
      while((chosen_index_of_item = -1) and (I < 4))do
      begin
      I := I+1;

      if (FileExists('C:/Simba/Scripts/Data.csv')) then
      begin
        the_file := OpenFile('C:/Simba/Scripts/Data.csv', True);

        if(the_file = -1)then
        begin
            Wait(4000);
        end;

      end;

      //We found the file
      if(the_file <> -1)then
      begin
        ReadFileString(the_file, s, FileSize(the_file));
        CloseFile(the_file);

        //Break apart the file by "\r\n" or CRLF or #13#10
        temp_strings := Explode(#13#10,s);

          //Go to the first index and incrementally move up since Data.csv is now sorted in ascending order in terms of accounts buying/selling that item
          //random_number := Random(Length(temp_strings));
          random_number := 0
          random_string := temp_strings[random_number];

        //Make sure we have at least
        if(Length(temp_strings) > 3)then
        begin
           //split up the string so we can read the first element
           tested_item :=  Explode(',', temp_strings[random_number]);

           //Grab the itemID
           tested_itemID := StrToInt(tested_item[0]);

           time_difference :=   Round(Now*10000) -  latestTimes[tested_itemID];

        if((tested_itemID <> item1ID) and (tested_itemID <> item2ID) and (tested_itemID <> item3ID) and (time_difference > 1667))then
        begin
              chosen_index_of_item := random_number;
        end else
        begin
        num_tries := 0;
             while(chosen_index_of_item <> -1) and (num_tries < 150) do
             begin
                 num_tries := num_tries+1;
                 random_number := random_number+1;
                 random_number := random_number mod Length(temp_strings)

                 tested_item :=  Explode(',', temp_strings[random_number]);

                  //Grab the itemID
                  tested_itemID := StrToInt(tested_item[0]);
                  if (tested_itemID < 100)  and (tested_itemID > 0)  then
                  begin
                       time_difference :=   Round(Now*10000) -  latestTimes[tested_itemID];
                       if (time_difference > 1667) then //if its been greater than 4 hours!
                       begin
                           if((tested_itemID <> item1ID) and (tested_itemID <> item2ID) and (tested_itemID <> item3ID))then
                           begin
                                chosen_index_of_item := random_number;
                           end;
                       end;
                 end;
             end;
        end;
        end;
        end;
        end;

        if(chosen_index_of_item <> -1)then
        begin
            Writeln('Chosen item is: ' + temp_strings[chosen_index_of_item]);
            Result := temp_strings[chosen_index_of_item];
        end else
        begin
            Result := '';
        end;
end;

function  loadUpdateTimes(): latest_Update_time_array;
var
      s: string;
      temp_strings: TStringArray;
      I, the_file: integer;
      latestUpdateTimes: latest_Update_time_array;
begin

    for I := 1 to 100 do
    begin
        latestUpdateTimes[I] := 0;
    end;
    if (FileExists('C:/Simba/Scripts/LastTradeTime.txt')) then
    begin
         the_file := OpenFile('C:/Simba/Scripts/LastTradeTime.txt',True);
          if(the_file <> -1)then
          begin
              ReadFileString(the_file, s, FileSize(the_file));
              CloseFile(the_file);
              temp_strings := Explode(#13#10,s);
              for I := 1 to Min(100, Length(temp_strings)) do
              begin
                  latestUpdateTimes[I] := StrToInt(temp_strings[I-1])
              end;
          end;
    end;
    Result := latestUpdateTimes;
end;

//Get information about an ItemID
//Parameter:  the itemID
//Returns:  CSV delineated string of the item information
function GetItemInformation(itemID: integer): string;
var
s, the_item: string;
the_file, chosen_index_of_item, I, J: integer;
temp_strings, tested_item: TStringArray;
tested_itemID: integer;

begin
    Result := '';
    chosen_index_of_item := -1;
    tested_itemID := -1;
    I := 4;

      while((tested_itemID = -1) and (I > 0))do
      begin
      I := I-1;

      if (FileExists('C:/Simba/Scripts/Data.csv')) then
      begin
        the_file := OpenFile('C:/Simba/Scripts/Data.csv', True);

        if(the_file = -1)then
        begin
            Wait(4000);
        end;

      end;

      if(the_file <> -1)then
      begin
        ReadFileString(the_file, s, FileSize(the_file));
        CloseFile(the_file);

        //Break apart the file by "\r\n" or CRLF or #13#10
        temp_strings := Explode(#13#10,s);

        J := 0;

        while((tested_itemID <> itemID) and (J < Length(temp_strings)))do
          begin
          //split up the string so we can read the first element
          tested_item := Explode(',', temp_strings[J]);

          the_item := temp_strings[J];

          //Grab the itemID
          tested_itemID := StrToInt(tested_item[0]);

          J := J+1;
        end;

        end;
        end;

        if(tested_itemID = itemID)then
        begin
            Result := the_item;
        end else
        begin
            Writeln('no item found');
            Result := '';
        end;
end;

// This function saves our price changes to a local database
procedure save_price_changes_to_socket(itemID: integer; name_in: string; buy_price_in, sell_price_in, delta_buy, delta_sell: integer );
var
 theSocket: integer;

begin
theSocket := CreateSocket;
SetTimeout(theSocket,10000);
ConnectSocket(theSocket,'67.202.43.230','443');
SendSocket(theSocket,IntToStr(ACCOUNT_ID)+','+IntToStr(itemID)+','+IntToStr(buy_price_in)+','+IntToStr(sell_price_in)+','+IntToStr(delta_buy)+','+IntToStr(delta_sell));
CloseSocket(theSocket);
writeln('Finally');
FreeSocket(theSocket);
Wait(300);
end;

procedure SavePrices(itemIDs : item_ID_array; num_bought: boughtSoFar_array);
var
i: integer;
the_file: integer;
begin

  //If the file doesn't exist, create it.
  if not (FileExists('C:/Simba/Scripts/SavedPrices.txt')) then
  begin
     the_file := CreateFile('C:/Simba/Scripts/SavedPrices.txt');
  end;

  if (FileExists('C:/Simba/Scripts/SavedPrices.txt')) then
  begin
     the_file := RewriteFile('C:/Simba/Scripts/SavedPrices.txt',True);
  end;

  if (the_file <> -1) then
  begin
  for i:= 1 to 3 do
  begin
    //Save the buy/sell prices
    //To add a new line, use #13#10 to denote a CRLF (carriage return line feed)
    WriteFileString(the_file, inttostr(itemIDs[I]) + ',' + inttostr(num_bought[i]) + #13#10);
  end;
  end;
  CloseFile(the_file);
end;

procedure SaveLastTradeTime(latestUpdateTimes: latest_Update_time_array);
var
i: integer;
the_file: integer;
begin
  //This procedure just saves the item id's and the corresponding last time that we were trading it
  //If the file doesn't exist, create it.
  if not (FileExists('C:/Simba/Scripts/LastTradeTime.txt')) then
  begin
     the_file := CreateFile('C:/Simba/Scripts/LastTradeTime.txt');
  end;

  if (FileExists('C:/Simba/Scripts/LastTradeTime.txt')) then
  begin
     the_file := RewriteFile('C:/Simba/Scripts/LastTradeTime.txt',True);
  end;

  if (the_file <> -1) then
  begin
  for i:= 1 to 100 do
  begin
    //Save the buy/sell prices
    //To add a new line, use #13#10 to denote a CRLF (carriage return line feed)
   WriteFileString(the_file, inttostr(latestUpdateTimes[i])+#13#10);
  end;
  end;
  CloseFile(the_file);
end;
