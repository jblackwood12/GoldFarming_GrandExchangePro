//check 3 different colors in top left, this image is always present on ge screen
function isGEOpen: boolean;
begin
   if((GetColor(40,37) = 48358) and (GetColor(40, 36) = 1587587) and (GetColor(40, 35) = 48358)) then
   begin
        Result := True;
   end else
   begin
        Result := False;
   end;
end;

function FindTPoints(HueMod, SatMod: Extended; Color, MinMatches, Tol: Integer): TPointArray;
var
  I: Integer;
  P: TPointArray;
  T2D: T2DPointArray;
begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(HueMod, SatMod);
  FindColorsTolerance(P, Color, MSX1, MSY1, MSX2, MSY2, Tol);
  SetColorSpeed2Modifiers(0.2, 0.2);
  ColorToleranceSpeed(1);
  T2D := TPAtoATPAEx(P, 30, 30);
  SetLength(P, 0);
  for I := 0 to Length(T2D) - 1 do
  if Length(T2D[I]) >= MinMatches then
  begin
    SetLength(Result, Length(Result)+1);
    Result[High(Result)] := MiddleTPA(T2D[I]);
  end;
  SortTPAFrom(Result, IntToPoint(MSCX, MSCY));
end;

procedure LogOutCompletely;
begin
   //Click the "X" button in the top right hand corner.
   MouseBox(747, 5, 762, 19, 1);
   Wait(6000 + Random(3000));

   //Click the "Exit to Login" button in the bottom right hand corner.
   MouseBox(569, 395, 712, 421, 1);
   Wait(6000 + Random(3000));
end;

function OpenGE: boolean;
var
  modded_num: Integer;
  X, Y, I, Attempts: Integer;
  VP: TPointArray;
begin
//move the camera down so we can see the clerk
SendArrowWait(2,3000+Random(2000));

  while (not isGEOpen) do
  begin
    Inc(Attempts);
    if Attempts = 15 then
    begin
      LogoutCompletely;
      Wait(36000000); //Wait 10 hours
      Result := False;
    end;
    if ((Attempts mod 2) = 0) then MakeCompass(rs_GetCompassAngleDegrees+80+Random(2)*180);
    wait(3000 + Random(5000))
    //Grand Exchange clerk can be many different colors.
    //Based upon the attempt, we will try a different color
    modded_num := Attempts mod 5;
    case modded_num of
    0: VP := FindTPoints(0.13, 0.41, 2102553, 10, 4);
    1: VP := FindTPoints(0.13, 0.41, 1905430, 10, 4);
    2: VP := FindTPoints(0.13, 0.41, 3613994, 10, 4);
    3: VP := FindTPoints(0.13, 0.41, 3153956, 10, 4);
    4: VP := FindTPoints(0.13, 0.41, 4205363, 10, 4);
    end;

    for I := 0 to Length(VP) - 1 do
    begin
      MMouse(VP[I].x-1, VP[I].y-1, 3, 3);
      Writeln('Mousing over clerk!');
      if WaitUpTextMulti(['Grand', 'Exchange', 'clerk'], 2000+Random(2000)) then
      begin
        Writeln('Found the clerk!');
        GetMousePos(x, y);
        Mouse(x, y, 0, 0, True);
        wait(4000 + Random(3000));
        Writeln('Talking with clerk, trying to open GE!');

        Wait(1000+random(600));
        Flag;
        Wait(2000+random(600));

        //Hi there.
        //MouseBox(139, 455, 281, 463, 1);
        MouseBox(224, 464, 291, 474, 1);
        Wait(5000+random(2000));

        //Good day to you, sir.  How can I help?
        //MouseBox(237,454,381,463,1);
        MouseBox(224, 464, 291, 474, 1);
        Wait(5000+random(2000));

        //Select an Option (I want to access the Grand Exchange, please.)
        //MouseBox(105,380,410,389,1);
        MouseBox(100, 380, 417, 390, 1);
        Wait(5000+random(2000));

        //I want to access the Grand Exchange, please
        //MouseBox(137,453,282,461,1);
        MouseBox(224, 464, 291, 474, 1);
        Wait(6000+random(2000));

        //Only too happy to help you, sir
        //MouseBox(236,455,381,464,1);
        MouseBox(224, 464, 291, 474, 1);

        //Wait for the ge to open.
        for i:=0 to 10 do
        begin
        if isGEOpen then
        begin
        //CHANGE THE CAMERA ANGLE TO BE MORE AERIAL
        SendArrowWait(0,3000+Random(2000));    //Send the up key for avg 3 sec
        break;
        end;
        wait(500 + Random(200));
        end;

        Break;
      end;
    end;
    Sleep(1000);
  end;
  Result := True;
end;

procedure CloseGE;
var
tryToCloseGe, waitForGeToClose: integer;
begin
   for tryToCloseGe:= 0 to 4 do
   begin
      if isGEOpen then
      begin;
         MouseBox(479, 39, 488, 48, 1);
          for waitForGeToClose:= 0 to 5 do
          begin
              if isGEOpen then
              begin;
                    Wait(400+Random(300));
               end else
               begin
                    exit;
              end;
          end;
      end;
   end;
end;

function isBuyScreenOpen: boolean;
begin
  Result := (GetColor(187,74) = 61128);
end;

function isSellScreenOpen: boolean;
begin
  Result := (GetColor(187,74) = 44798);
end;

procedure ClickBack;
begin
   wait(1500+Random(300));
   Mouse(42, 294, 14, 8, true);
   wait(1500+Random(300));
end;

function EnsureMainGE: boolean;
var
  i: integer;
  return_bool: boolean;
begin
  return_bool := false;
  i := 0;
  while (not isGEOpen)and(i < 10) do
  begin
            OpenGE;
            wait(2000 + Random(1000));
           i := i + 1;
  end;

  //now, we should be in the ge :)
  //we need to make sure that there is no back arrow..  (Coordinates (46, 299) are within that arrow)
  //if the mouse is in the way, just ignore the fact that that there is the possiblity of the second screen
  //the pixel has to match the arrow pixel exactly so that it doesn't accidentally doesn't assume the second screen
  i := 0;
  while (GetColor(46, 299) = 12172488)and(i < 10) do
  begin
     wait(1000 + Random(500));
     if isGEOpen then ClickBack;
     wait(1000 + Random(500));
     i := i + 1;
  end;
  if (i < 9)and(isGEOpen) then begin
      return_bool := true;
  end;
  //all in all, this makes 3 checks:
  //Check if we are in the ge, check that there is no arrow, check if in ge
  Result := return_bool;
end;

function GESpotToTBox(spot: integer): TBox;
var
  i, x1, x2, y1, y2: integer;
begin
{
box width: 140
box height: 112
gap hor: 16
gap ver: 8
}
  if spot > 3 then
    i := spot - 3 - 1
  else
    i := spot - 1 ;

  x1 := 32 + (16 + 140)*i;
  x2 := 172 + (16 + 140)*i;

  if spot > 3 then
    i := 1
  else
    i := 0;

  y1 := 82 + (112 + 8)*i;
  y2 := 194 + (112 + 8)*i;

  Result := IntToBox(x1, y1, x2, y2);
end;

function GEIsSpotFree(spot: integer):boolean;
var TB: TBox;
begin
  if not isGEOpen then exit;

  TB := GESpotToTBox(spot);
  Result := (GetColor(TB.x1 + 9, TB.y2 - 30) <> 0);
  writeln('coords: '+IntToStr(TB.x1+9)+', '+ IntToStr(TB.y2 -30));
end;

procedure abortandcollect(spot: integer; abort:boolean);
var
  TB: TBox;
  i: integer;
begin
  if not isGEOpen then exit;
  if GEIsSpotFree(spot) then exit;

  TB := GESpotToTBox(spot);
  MouseBox(TB.x1, TB.y1, TB.x2, TB.y2, 1);

  //pause until buy/sell screen is open.
  for i:= 0 to 10 do
  begin
    if ((isBuyScreenOpen)or(isSellScreenOpen)) then
      break;
    wait(500 + Random(100));
  end;

  //if the buy/sell screen is not open, try to open it once more.
  if (not (isBuyScreenOpen or isSellScreenOpen)) then
  begin
     MouseBox(TB.x1, TB.y1, TB.x2, TB.y2, 1);
     Wait(4000+Random(3000));
  end;

  Writeln('Trying to abort offer!');

  if abort then
    for i:= 0 to 5 do //If the abort button is visible, click it.
    begin
        if (GetColor(364, 281) = 725860) then
        begin
          Mouse(356, 280, 14, 13, true);
          wait(2000 + Random(1000));
          wait(100);
        end;
    end;

    for i:= 0 to 10 do //waiting until aborted
      begin
        wait(500);
        if (GetColor(202, 309) <> 2567993) then break;
      end;

    for i:= 0 to 5 do   //Continues, until buy/sell screen not visible.
    begin
    if ((isSellScreenOpen) or (isBuyScreenOpen)) then
      begin
          wait(2000 + Random(2000));
          MouseBox(451, 285, 483, 313, 1); //Collect from the second slot
          wait(1000+Random(700));
          MouseBox(401, 286, 434, 312, 1); //Collect from the first slot
          wait(4300+Random(2000));
        end;
    end;
  wait(2000+Random(500));
  EnsureMainGE;
end;

function ClickBuySlot(spot: integer): boolean;
var
  TB: TBox;
  x: integer;
begin
  if not isGEOpen then OpenGE; //added openge instead of exit, be more forgiving.
  if not GEIsSpotFree(spot) then
  begin
    abortandcollect(spot, True); //cancel an offer in this slot so we can make a new offer.
  end;

  TB := GESpotToTBox(spot);     //Gather the coordinates of the relative gespot.
  MouseBox(TB.x1 + 35, TB.y1 + 50, TB.x1 + 65, TB.y1 + 80, 1); //Click within this defined area.
  wait(2000+Random(75));

  //Wait small increments of time until the GEBuyMenu is open.
  for x:= 0 to 9 do
  begin
    wait(400+Random(600));
    if isBuyScreenOpen then break; //If the GEBuyMenu becomes open, stop waiting!
  end;

  Result := isBuyScreenOpen;
end;

function ClickSellSlot(spot: integer): boolean;
var
  TB: TBox;
  x: integer;
begin
  if not isGEOpen then OpenGE;
  if not GEIsSpotFree(spot) then
  begin
    abortandcollect(spot, True);
  end;

  TB := GESpotToTBox(spot);
  Mouse(TB.x1 + 86, TB.y1 + 52, 29, 28, true);
  wait(2000+Random(75));

  //Wait small increments of time until the GEBuyMenu is open.
  for x:= 0 to 9 do
  begin
    wait(400+Random(600));
    if isSellScreenOpen then break;  //If the GESellMenu becomes open, stop waiting!
  end;

  Result := isSellScreenOpen;
end;

//if true, clicks +5%, if false, clicks -5%
function ClickFivePercent(increase: boolean; numpresses: integer): boolean;
var
i: integer;

begin
    for i:= 0 to numpresses do // waiting text
      begin
      if increase then
        begin
        MouseBox(427, 211, 460, 233, 1);
        end//no semicolon if followed by an else
      else
        begin
        MouseBox(273, 211, 306, 233, 1);
        end;
   end;

   Result := True;
end;

//Function will place a buy offer
//Parameters:  Name of the item, price to buy, quantity of the item, slot of item
//LAST PARAMETER:  The "MinOrMax" quantity dictates whether to hit the +5% or -5% button
//EXAMPLE:  Entering -3 will result in 3 times -5% button presses (-15% market price)
//EXAMPLE:  Entering 2 will result in 2 times +5% button presses (10% market price)
//SCENARIO:  The last parameter should only be used for finding sell price
//DEFAULT:  Should enter in 0 by default
function MakeBuyOffer(Name: string; price_in, quantity_in, spot, MinorMax: integer): boolean;
var
i, j, click_spot:integer;
 Price, Quantity: string;
 temp_strings: TStringArray;
begin

Price:= inttoStr(price_in); //converts the price from int to string before we pass to a string parameter.
Quantity := inttoStr(quantity_in);  //converts the quantity from int to string before we pass to a string parameter.

if (quantity_in > 0) then
begin

if not isGEOpen then OpenGE;  //Added "OpenGE" instead of "Exit," this will be much more forgiving.  **JUST ADDED**

//try to create a buy offer by clicking the buy offer slot
i := 0;
    While ((not isBuyScreenOpen) and (i < 5)) do
    begin
        if isGEOpen then ClickBuySlot(spot);
        Wait(7000 + Random(3000));
        i := i + 1;
    end;

if(GetColor(21, 358) <> 8035499) then //checking that the color of a square is grey, to know that we have the item search up.
    begin
    writeln('Item search is not up, trying to open again!');
    if isGEOpen then Mouse(108, 99, 34, 31, true); //try to open up the buy "Item Search" again.
end;

//split up the "Name" string
temp_strings := Explode('/',Name);

//the first index will contain the name of the item
Name := temp_strings[0];

//the second index will contain the click_spot (default is 0)
click_spot := 0;
//make sure we actually have a second index element
if (Length(temp_strings) = 2) then
begin
click_spot := strtoint(temp_strings[1]);
end;

Writeln('Item search is up!');
if isGEOpen then TypeSend(lowercase(Name));  //Type out the name of the item we want to buy.
wait(6000+Random(5000));
              //----------------------this is what i changed so that we can do items not in #1-------------------/
if isGEOpen then Mouse(71, 348 + 14*click_spot, 400, 7, true);//click on the item name within the search box.
Wait(7000 + Random(3500));

//Checks the little gold stack in hand to move
if(GetColor(115,139) <> 16187134) then //make sure we clicked on the item
  begin

if isGEOpen then Mouse(220, 211, 33, 22, True); //click the quantity change button.
Wait(6000 + Random(4500));
if isGEOpen then TypeSend(lowercase(Quantity));  //change the quantity

if (MinorMax = 0) then  //Don't hit the 5% button at all.  Just type in the price.
    begin

    Wait(4000+Random(3000));

    for j:=0 to 10 do
               begin
               if((GetColor(505,452) = 2041132) or (GetColor(504,348) = 1185048)) then
               begin
                if isGEOpen then Mouse(370, 212, 32, 21, true);
                Wait(1000 + Random(500));
               end;
               end;

    //Adding an additional wait here so that we don't miss typing any numbers
    Wait(3350+ Random(1275));

    if isGEOpen then TypeSend(lowercase(Price));  //change the price
    end;

if (MinorMax > 0) then //Hit the +5% button.
    begin
    if isGEOpen then ClickFivePercent(True, MinorMax);
    end;

if (MinorMax < 0) then //Hit the -5% button.
    begin
    if isGEOpen then ClickFivePercent(False, MinorMax);
    end;

    Wait(6000+Random(3000));

    if isGEOpen then Mouse(204, 276, 118, 40, True); //Click the confirm button.

    //make sure we wait atleast 2 seconds.
    Wait(2000 + Random(500));

    //continue to pause until buy screen is not visible.
    for i:= 0 to 10 do
    begin
    if (not isBuyScreenOpen) then
        break;
    wait(500 + Random(200));
    end;
    end;

    wait(2000+Random(500));
    EnsureMainGE; //Make sure we are at the main ge menu before we do anything else.
    end;
    Result := True;
end;

procedure viewoffer(spot: integer);
var
  TB: TBox;
begin
  if not isGEOpen then OpenGE;
  TB := GESpotToTBox(spot);
  MouseBox(Tb.x1, Tb.y1, TB.x2, TB.y2, 1);
  wait(3000 + Random(4000));
end;

function percent_complete (spot: integer): integer;
  // this checks for the completeness of each specified  order spot
  // it will return between 0 and 100 for the percent complete (incremets of 25)
  // returns -100 if nothing executed
  // returns -500 if the GE is closed
  // returns -1 if the GE is open and the spot is empty
var
  pct: integer;
  color100, color75, color50, color25: integer;
  TB: TBox;
begin
      pct := -100;    // default pct value
      Writeln('We are about to check the completeness');
      if not isGEOpen then
      begin
              // if its not in the GE, let the user know and return -1
              pct := -500;
              Writeln('not in GE!!!');
      end else
      begin
             // if it is infact in the GE
           if not GEIsSpotFree(spot) then
           begin
              // if its in the GE and has a  buy or sell offer, check for completeness
              TB := GESpotToTBox(spot);
              pct := 0;        //assume 0%
              // check if they are not within the thresholds of incompleted
              color100 := GetColor(TB.x1 + 122, TB.y1 + 90);
              color75 :=  GetColor(TB.x1 + 93, TB.y1 + 90);
              color50 :=  GetColor(TB.x1 + 63, TB.y1 + 90);
              color25 :=  GetColor(TB.x1 + 33, TB.y1 + 90);
              if (color100 > 2600000) or (color100 < 2400000) then begin
                    pct := 100;
              end else if (color75 > 2600000) or (color75 < 2400000) then begin
                    pct := 75;
              end else if (color50 > 2600000) or (color50 < 2400000) then begin
                    pct := 50;
              end else if (color25 > 2600000) or (color25 < 2400000) then begin
                    pct := 25;
              end;
           end else
           begin
              // if its in the GE and the spot is empty, set to -1
              pct := -1;
           end;

      end;

      Result := pct;
end;

 function find_sell_quantity: integer;
 var
    pixel_total, i, j, sell_quantity: integer;
 begin

     //Set default to -1, in case we dont have buy/sell screen open.
     sell_quantity := -1;

     //make sure we are either on a buy/sell screen
     if ((GetColor(187,74) = 61128) or (GetColor(187,74) = 44798)) then
     begin

     sell_quantity := 11; //set the default to 11, could own more than 10 of item

        i := 153;
        j := 190;
        pixel_total := 0;

        //its about to sum up 9 representative pixels
        while (i <= 157) do
           begin
            while (j <= 196) do
             begin
                pixel_total := pixel_total + GetColor(i, j);
                j := j + 2;
             end;
             i := i + 2;
         end;

        case pixel_total of
        21440820: sell_quantity := 0;
        8960220:  sell_quantity := 1;
        15040565: sell_quantity := 2;
        13120420: sell_quantity := 3;
        8640310:  sell_quantity := 4;
        10880365: sell_quantity := 5;
        6400255: sell_quantity := 6;
        17280620: sell_quantity := 7;
        21440820: sell_quantity := 8;
        13120420: sell_quantity := 9;
        6720165: sell_quantity := 10;
        end;

        //Since 8 and 0 have the same pixel total, check the difference
        if (pixel_total = 21440820) then
        begin
          if (GetColor(154, 190) = 6400255)then
          begin
              sell_quantity := 8;
          end;
        end;

        //Since 9 and 3 have the same pixel total, check the difference
        if (pixel_total = 13120420) then
        begin
          if (GetColor(152,194) <> 6400255) then
          begin
            sell_quantity := 9
          end;
        end;


     end;
   Result := sell_quantity;
 end;

  function isItemInInvSpot(slotNumber_in, itemID_in: integer; clickItem: Boolean): Boolean;
var
     errorThreshold: integer;
     notedDiff, unnotedDiff: integer;
     x_temp, y_temp, pixelCount: integer;
     intermediateInt: integer;
     inventoryBox: TBox;
     n: integer;
     unnotedItem: string;
     notedItem:string;
     nthStrUnnoted, nthStrNoted: string;

begin
     //This function takes in an inventory spot and tries to identify if there is
     //an a given item in that inventory position

     //note that we take a given inventory position and start by adding 9 rows
     //to avoid the numbers... and then if the x and y are even, then we sample.
     unnotedItem := '';
     notedItem := '';
     inventoryBox := InvBox(slotNumber_in);
     errorThreshold := 60*1000*1000;   //60 million, same images are usually under 25m... different images are usually 200-400m

     case itemID_in of
     1: Begin  //This is bandos godsword
         unnotedItem := '003358535,003358535,003358535,003358535,003752777,003358535,003160642,000131072,000131072,000131072,000131072,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,003355955,003355955,002105392,003358535,003358535,003358535,000131072,003358535,003358535,003358535,000131072,003487797,000131072,003355955,002105392,003160642,003358535,003358535,000131072,000131072,003358535,003358535,005131083,003486515,002105392,002105392,003160642,003358535,003358535,003358535,005722963,005722963,000131072,003355955,000131072,002105392,003358535,003358535,003358535,003358535,003358535,000131072,000131072,009472650,005131083,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,009472650,006841443,005591377,000131072,003358535,003358535,003358535,003358535,003160642,003358535,000131072,008288376,000131072,002105392,005722963,005459791,002105392,003358535,003358535,003358535,003358535,008156790,008748927,008156790,002105392,000131072,005722963,005131083,003358535,003358535,003358535,003358535,003358535,008880513,008880513,002105392,003358535,003358535,002105392,003358535,003358535,003358535,003358535,003358535,003358535,008617598,002105392,003160642,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,009143685,002105392,000131072,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003752777,003358535,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003160642,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
         notedItem :=   '000131072,000131072,000131072,006852252,006786203,006786203,006852252,006852252,006852252,000131072,003358535,003424328,006588823,006588823,006588823,006588823,006588823,006720409,006720409,006720409,006786203,000131072,003358535,003424328,006390930,006456980,006456980,006456980,006522773,006522773,000131072,006588823,006588823,000131072,003358536,003160643,006325136,006325136,006325136,006456980,006588823,006720409,000131072,003355955,006720409,000131072,003160642,003358535,006984096,006984096,005131082,000131072,006984096,008288376,000131072,006984096,006984096,002105392,003358536,003358535,006984096,006984096,000131072,005591377,004014141,000131072,006852252,006720409,006456980,000131072,003358535,003358535,006786203,006588823,005591377,008025204,004473153,006325136,006325136,006325136,006325136,006325136,002105392,003160642,006390930,006325136,007762289,007104359,000131072,005131082,006390930,006390930,006456980,006390930,002105392,003358535,000131072,007762289,000131072,006390930,000131072,006456980,006456980,006456980,006522773,006456980,002105392,003358536,000131072,008288376,006720409,006918046,006918046,006918046,006918046,006918046,006918046,006918046,003358536,003358536,007367531,006918046,000131072,006918046,006918046,006984096,006984096,007049890,007049890,007181475,002105392,003358536,006918046,006984096,000131072,007049890,007247269,007313319,007379368,007445162,007445162,007445162,002105392,003358536,007708849,007708849,007840434,007840434,007840434,007840434,007906228,007906228,007906228,007906228,002105392,003752777,008103865,008103865,008103865,008038071,000131072,008103865,008038071,008038071,007972022,007972022,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003358535,003358535,003752777,003358536,003752778,003358535,003358535,003358536,003358535,003358535,003752777';
        End;

     2: Begin  //This is Mages' book
         unnotedItem := '002850190,003578801,000131072,003358535,003752777,003358535,003160642,003358792,003358792,003358535,003358535,003358535,002185838,002651267,003181212,003711415,000131072,003358535,003358792,003358792,003358792,003358535,003424072,003358535,002450554,002516604,002582912,002982548,003446442,003777980,003510447,000131072,003358535,003358536,003358535,003226435,001184826,001184826,002318196,002847628,002913936,003314085,003711415,003910594,003709113,000131072,003160899,003358792,001250880,001250880,001250880,001316674,001316674,002781321,003179166,003645108,003976388,004688803,000131072,003358792,001382468,001382468,001779647,001382468,001382468,001382471,001382471,002649219,003169902,003896199,000131072,003358535,001448265,001779647,001382471,001382471,001448265,001448265,001514060,001514060,008038071,000795737,002105392,003160643,001579854,001514060,001514060,001514060,001514060,001579854,001579854,001579854,001711703,000928100,002105392,003358536,001645651,001779647,001580112,001580112,001580112,001580112,001580112,000862306,001843291,000131072,002105392,003358536,001711445,001779647,001711445,001779647,001645651,001711445,001711445,000994670,001711703,000131072,003358536,003358536,001645651,001711445,001779647,001777497,001711703,001711703,001711703,007379368,000994928,002105392,003358536,003358536,001514060,001580112,001711445,001711703,001777497,001843291,001843291,001579854,001127294,002105392,003358536,003358536,003358535,000131072,001382468,001448265,001579854,001645651,004226194,001645651,004490652,002105392,003358536,003752778,003358535,003358535,003358535,000131072,001185085,002516604,003830149,001580112,004028043,002105392,003358535,003358792,003358535,003752777,003358535,003358535,003752777,000131072,003433590,002982548,003434104,002105392,003160642,003358535,003358535,003358535,003358535,003752777,003358535,003752777,002105392,003358535,002105392,003358535,003358535,003752777';
         notedItem :=   '000131072,000131072,000131072,006852252,006852252,006852252,006852252,006852252,006852252,000131072,003358535,003424328,006588823,006588823,006720409,006720409,006720409,006720409,006786203,006786203,006786203,000131072,003358535,003424328,006456980,000131072,000131072,006522773,006588823,006588823,006588823,006720409,006720409,000131072,003358535,003160643,000131072,002185580,002916498,003578801,000131072,000131072,006786203,006786203,006786203,000131072,003160642,003358535,000131072,001053237,002582912,002649477,003247520,003711929,003642548,000131072,007049890,002105392,003358535,003358535,000131072,001185085,001185085,001185085,002450554,002913936,003578801,004622496,006522773,000131072,003358535,003358535,001382468,001316674,001316674,001316674,001382468,001382471,003037802,000729424,006390930,006390930,002105392,003160642,001514060,001448265,001448265,001382471,001448265,001514060,000795479,000861790,006456980,006456980,002105392,003358535,001579854,001580112,001713849,001579854,001579854,001580112,007313319,000994670,006522773,006456980,002105392,003358535,001448265,001579854,001645651,001711445,001645651,001711445,001711445,000131072,006918046,006918046,003424328,003358535,000131072,000131072,001382468,001514060,001645651,001711703,001843291,000131072,007049890,007181475,002105392,003358535,006918046,006984096,007049890,000131072,002119016,003631998,003830149,007445162,007445162,007445162,002105392,003358535,007708849,007708849,007840434,007840434,007840434,000131072,000131072,007906228,007906228,007906228,002105392,003752777,008103865,008103865,008103865,008038071,000131072,008103865,008038071,008038071,007972022,007972022,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003424328,003424328,003424328,003818570,003424328,003752777,003424328,003424328,003424328,003424328,003424328,003752777';
        End;

     3: Begin //This is Zamorakian spear
         unnotedItem := '003358535,003358535,003358535,003358535,003752777,003358535,003160642,003358535,003358535,003358535,000131072,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,003423566,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,003225929,002105392,003160642,003358535,003358535,003358535,003358535,003358535,003358535,003752777,000131072,002765376,002105392,003160642,003358535,003358535,003358535,003358535,003358535,003358535,003358535,008355717,002172722,002105392,003358535,003358535,003358535,003358535,003358535,003160642,003358535,003358535,007632250,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003029843,000131072,002105392,003358535,003358535,003358535,003358535,003160642,003358535,003358535,003358535,002700361,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,005855838,002172722,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,006382182,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,005592409,000131072,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,005723995,006382182,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,000131072,002105392,003752777,003358535,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003752777,003358535,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003160642,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
         notedItem :=   '000131072,000131072,000131072,006786203,006786203,006786203,006786203,006786203,006786203,000131072,003358535,003424328,006522773,006522773,006588823,006588823,006588823,006588823,006720409,006720409,006720409,000131072,003358535,003424328,006390930,006390930,006456980,006456980,006522773,006522773,006522773,006588823,006588823,000131072,003358535,003160643,006259086,006325136,006325136,006456980,006588823,006720409,006720409,000131072,000131072,000131072,003160642,003358535,006984096,006984096,006984096,006984096,006984096,006984096,000131072,002436152,006984096,002105392,003358535,003358535,006984096,006984096,006984096,007049890,007049890,006908270,002304309,006720409,006456980,000131072,003358535,003358535,006786203,006588823,006522773,006456980,003095637,000131072,006259086,006325136,006325136,006325136,002105392,003160642,006325136,006259086,006259086,002569031,000131072,006325136,006325136,006390930,006390930,006325136,002105392,003358535,000131072,000131072,006382182,000131072,006390930,006390930,006390930,006456980,006456980,006390930,002105392,003358535,000131072,005987424,000131072,006852252,006852252,006852252,006852252,006852252,006852252,006852252,003358535,003358535,005066064,005592409,004737100,006852252,006852252,006918046,006918046,006984096,006984096,007049890,002105392,003358535,006852252,006918046,006984096,006984096,007181475,007247269,007313319,007379368,007379368,007445162,002105392,003358535,007643055,007708849,007708849,007840434,007840434,007840434,007906228,007906228,007906228,007906228,002105392,003752777,008103865,008103865,008103865,008038071,000131072,008103865,008038071,007972022,007972022,007906228,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003358535,003358535,003752777,003358535,003818570,003358535,003358535,003358535,003358535,003358535,003752777';
        End;

     4: Begin //This is Saradomin sword
         unnotedItem := '003358792,003424328,003358535,003358535,003752777,003358535,003160642,003358792,003358535,003690325,000131072,003424328,003358792,003358792,003358792,003424328,003358535,003358535,003358792,003358535,003358792,005140086,000131072,003424328,003358792,003358792,003358792,003358792,003424328,000131072,004617086,003424328,004822695,002105392,002105392,003160642,003358535,003358535,003358792,003358792,003358792,003358535,003303026,004822695,000131072,003424328,003160642,003358535,003358535,003358535,003358535,003358535,003358535,005986135,004822695,000131072,000131072,003424328,003358535,003358535,003358535,003358535,003160643,003358535,000131072,009932944,008025204,000131072,000131072,002105392,003358535,003358535,003358536,003358536,000131072,006183257,008025204,000131072,000131072,002105392,003358535,003358535,003358535,003160643,003358536,003358536,000131072,008617341,009209478,000131072,003424328,003358535,003358535,003358535,003358535,003358536,003358536,006578015,008748927,009341064,002105392,002105392,003358535,003358535,003358535,003424328,003358536,003358536,006446429,008748927,009341064,002105392,003358535,003358535,003358535,003424328,003358535,003358536,003358536,003358536,008880513,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358536,003358536,003358536,000131072,002105392,003358535,003424328,003358535,003358535,003358535,003358535,003358535,003358536,003358536,003358536,002105392,003358535,003358535,003752777,003358535,003358535,003424328,003358536,003424328,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003358792,003424328,003358536,003424328,003358535,003358535,003358535,003358535,003752777,003358535,003358535,003752777,003358535,003424328,003358792,003424328,003358535,003160642,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
         notedItem :=   '000131072,000131072,000131072,006852252,006852252,006852252,006852252,006852252,006852252,000131072,003424328,003358535,006720409,006720409,006720409,006720409,006720409,006786203,006786203,006786203,006852252,000131072,003358535,003358535,006456980,006522773,006522773,006588823,006588823,006588823,006720409,000131072,006786203,000131072,003358535,003160642,006325136,006390930,006390930,006522773,006720409,006852252,006852252,005271672,000131072,000131072,003160642,003358535,007049890,007049890,007049890,007049890,007049890,003765891,004888488,007049890,007049890,002105392,003358535,003358535,007049890,007049890,007049890,007181475,007235945,004947079,000131072,006786203,006522773,000131072,003424328,003358535,006852252,006720409,006588823,000131072,005722963,007893875,006325136,006390930,006390930,006390930,002105392,003226435,006390930,006325136,000131072,007630703,009603979,006390930,006390930,006456980,006456980,006456980,002105392,003424328,006325136,000131072,007630703,000131072,006456980,006456980,006456980,006522773,006522773,006456980,002105392,003424328,000131072,007762289,000131072,006918046,006918046,006918046,006918046,006918046,006918046,006984096,003358535,003424328,007893875,000131072,006918046,006918046,006918046,006984096,007049890,007049890,007181475,007247269,002105392,003424328,000131072,006984096,007049890,007181475,007247269,007379368,007445162,007511212,007511212,007511212,002105392,003424328,007840434,007840434,007906228,007906228,007906228,007906228,007972022,007972022,007972022,007972022,002105392,003818570,008169914,008169914,008169914,008103865,000131072,008169914,008103865,008103865,008038071,008038071,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003424328,003424328,003818570,003424328,003818570,003424328,003424328,003424328,003424328,003424328,003818570';
        End;

     5: Begin //This is Dragon claws
         unnotedItem := '003358792,003424328,003358535,000131072,000131072,000131072,000131072,000131072,000131072,003358535,003358535,003424328,000131072,000988780,000922724,000988780,000922982,000856928,000790871,000593216,000131072,002105392,003358535,003424328,000131072,000922982,000527421,000988522,000131072,001186693,001054580,001054840,001120636,001186433,001054840,000988782,000131072,000857186,000791131,000659276,000527418,000461624,000461624,000461624,000131072,002105392,002105392,002105392,000131072,000922982,000790871,001186433,001186433,001120638,001120634,001120634,001120634,003358535,003358536,003358535,000131072,000857186,000659276,000461624,000461621,000527421,000593218,000131072,002105392,003358535,003358535,003358535,000856926,000527418,000527418,000131072,002105392,002105392,002105392,003358535,003358536,003358536,003358536,003160642,000988782,000131072,000131072,002105392,003358535,003358536,003358535,003358535,003358535,003358535,003358535,003358535,001054578,002105392,003358535,003358536,003752777,003358535,003358535,003358535,003358535,003424328,003358536,003358536,001186432,000988782,003358535,003358536,003358535,003358535,003358535,003424328,003358535,003358536,003358536,003358536,000329770,001054840,001318546,000131072,003358535,003358535,003358535,003358535,003358535,003358536,003358536,003358536,001054578,001252489,000922984,001120638,001318546,000131072,003358535,003358535,003358535,003358536,003358536,003358536,000329770,000922982,001318286,002105392,000131072,001054838,001120634,003358535,003424328,003752777,003358535,003752777,001054578,001186693,000659276,001186691,000131072,002105392,002105392,003358535,003358536,003358535,003358535,003358535,000131072,000329508,001054840,001318286,000131072,000988522,001120638,003358535,003358535,003358535,003160642,003358535,003358535,003358535,002105392,000131072,000922984,001054580,002105392,003358535,003358536,003358535,003358535,003752777';
         notedItem :=   '000131072,000131072,000131072,006720409,006720409,006720409,006720409,006720409,006720409,000131072,003424328,003358535,006456980,006456980,006522773,006522773,006522773,006588823,006588823,006588823,006720409,000131072,003424328,003358535,006325136,006390930,006390930,006456980,006456980,006456980,006522773,006522773,006588823,000131072,003424328,003160642,006127500,000131072,000857186,000989040,001054580,000988780,000725331,000131072,006720409,000131072,003226435,003358535,006918046,000131072,000922724,000988780,001054578,001054580,000791131,000527421,006918046,002105392,003424328,003358535,006918046,000131072,000922984,000989040,001054840,001120636,001120636,000131072,006390930,000131072,003424328,003358535,000131072,000131072,000593476,000131072,000131072,000131072,006127500,006259086,006259086,006259086,002105392,003226435,001054838,000988522,000131072,006127500,006259086,006259086,006259086,006325136,006325136,006325136,002105392,003424328,001186433,001252231,000131072,006259086,006325136,006325136,006325136,006390930,006390930,006325136,002105392,003424328,000329770,000395568,001054838,000131072,006786203,006786203,006786203,006786203,006786203,006852252,003424328,003424328,000989040,000395568,001252489,000131072,001054838,000131072,006918046,006918046,006984096,007049890,002105392,003424328,000131072,000725070,001252231,000395568,001252491,000131072,007313319,007379368,007379368,007379368,002105392,003424328,007643055,007643055,000131072,000197913,001054840,000131072,007840434,007840434,007840434,007840434,002105392,003818570,008038071,008038071,008038071,007972022,000131072,008038071,007972022,007906228,007906228,007840434,000131072,003424328,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
        End;

     6: Begin //This is Dragon chainbody
         unnotedItem := '003358535,003358535,003358535,003358535,003752777,003358535,003160642,003358535,003358535,003358535,003358535,003358535,000131072,003358535,000131072,000131072,005526625,005132405,000593217,000593220,001450403,000131072,003358535,003358535,001318287,001120637,000922985,000396588,000460825,001382470,000395029,000329510,000395567,000131072,003358535,003160642,001252232,000659017,003553362,000789517,000131072,001382470,000131072,000131072,002105392,002105392,003160642,003358535,001252232,003618889,001973080,002367593,000131072,003358535,000131072,003358535,003358535,003358535,003358535,003358535,001120635,000922985,003552838,003882072,002761849,003357773,003357773,000131072,003358535,003358535,003358535,003358535,000988781,001645650,000922985,000922985,000922985,002831169,000789517,001450145,003358535,003358535,003358535,003160642,000856927,001054579,000725332,000659277,000593478,002370359,001384344,001647797,000131072,003358535,003358535,003358535,000856927,001448265,000791131,000790870,000725074,002041135,000922725,000131072,002105392,003358535,003358535,003358535,000856927,000725332,002631988,002829377,001775696,001646118,001909292,000131072,002105392,003358535,003358535,003358535,002500402,003158335,002104413,000131072,000131072,000131072,000131072,000131072,003358535,003358535,003358535,003358535,000395029,000395826,002829377,000789517,000789517,000131072,000131072,002105392,003358535,003358535,003358535,003358535,000395029,000725072,000527420,003816260,000460825,002633350,000526876,000395826,000527423,000131072,003358535,003752777,000131072,002105392,002105392,000131072,000131072,002829377,000395564,000395826,000922985,000131072,003358535,003358535,003358535,003752777,003358535,003358535,003752777,003358535,000131072,002105392,000131072,002105392,003160642,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
         notedItem := '000131072,000131072,000131072,006852510,006786460,006786460,006852510,006852510,006852510,000131072,003358535,003358535,006654616,006654616,006654616,006654616,006720666,006720666,006720666,006786460,006786460,000131072,003358535,003358535,006391187,006522773,006522773,006588567,006588567,006588567,006654616,006654616,006720666,000131072,003358535,003160642,006259343,000131072,000131072,000131072,005395039,000461623,001450145,000131072,006786460,000131072,003160642,003358535,001054579,001252492,000988781,000789517,000789517,000329233,000131072,007049889,007049889,002105392,003358535,003358535,000791131,001186694,003618889,002367593,000131072,000131072,006852510,006720666,006522773,000131072,003358535,003358535,000725074,001054579,000922983,000922983,004870753,003160393,006259343,006325393,006325393,006325393,002105392,003160642,000791131,000791131,000922983,000659275,003620169,001318549,001648055,006391187,006391187,006391187,002105392,003358535,001054839,000791131,000725074,002500402,002764599,000789517,000131072,006522773,006522773,006391187,002105392,003358535,000988783,002368559,001841490,000131072,000131072,000131072,006983839,006983839,006983839,006983839,003358535,003358535,000593220,000395029,000593217,000789517,000526876,000526876,000131072,007115683,007115683,007181732,002105392,003358535,006983839,000131072,007115683,000131072,000131072,000329769,000856929,000131072,007445419,007576749,002105392,003358535,007774642,007840435,007840435,007906485,007906485,007906485,000131072,007972279,007972279,007972279,002105392,003752777,008170172,008170172,008170172,008104122,000131072,008170172,008104122,008104122,008038328,008038328,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
        End;

     7: Begin //This is Archers' ring
         unnotedItem :='003358792,003358792,003358792,003358792,003753034,003358792,003226435,003358792,003358792,003358792,003358792,003358792,000131072,000131072,000131072,003358792,003358792,003358792,003358792,003358792,003358792,003358792,003358792,003358792,002634804,003028540,002632751,002105392,003358792,003358792,003358792,003358792,003358792,003358792,003358792,003226435,001978981,003028540,002303529,000131072,000131072,000131072,000131072,000131072,003358792,003358792,003226435,003358792,002176879,002440571,002171942,003044504,002776161,002982805,003314084,004414329,004678017,003358792,003358792,003358792,002506623,000131072,003110812,002978197,002644061,002519167,002974311,003502969,004612223,004941704,003358792,003358792,003034522,003364189,003308964,004020876,004416410,002105392,000131072,002713736,003507630,004872617,000131072,003226435,007700872,004294293,004019053,004414329,000131072,003358792,003358792,002184045,002978197,003706554,005004462,002105392,005594723,004954795,004547998,005141427,002105392,003358792,003358792,000131072,003104875,003832198,004875654,002105392,006318447,004353399,004348535,000131072,003358792,003358792,003358792,000131072,002973031,003832198,004809860,002105392,005857895,003759975,004350359,005075376,003358792,003358792,003358792,000131072,002978197,003574195,004872617,002105392,004146505,001988451,004020876,004482204,000131072,003358792,003358792,003104875,003567741,003640247,004609441,002105392,002105392,001458249,002708831,002978197,002846095,002978711,002978711,003242913,003633791,004150897,002105392,003753034,003358792,003358792,001783871,002316661,002647686,003104875,003171439,003110812,003489913,002105392,003358792,003358792,003358792,003753034,003358792,000131072,000131072,002305855,000131072,000131072,002105392,003358792,003226435,003358792,003358792,003358792,003358792,003753034,003358792,002105392,002105392,003358792,003358792,003358792,003358792,003753034';
         notedItem := '000131072,000131072,000131072,006852510,006852510,006852510,006852510,006852510,006852510,000131072,003358792,003358792,006654616,006654616,006720666,006720666,006720666,006720666,006786460,006786460,006786460,000131072,003358792,003358792,006522773,006588567,000131072,006588567,006654616,006654616,006654616,006720666,006720666,000131072,003358792,003226435,006391187,002896698,002632751,000131072,006720666,006786460,006786460,006786460,006786460,000131072,003226435,003358792,002370095,002898490,002500908,000131072,007115683,007115683,007115683,007115683,007115683,002105392,003358792,003358792,000131072,002308725,002303529,003044762,003040361,003314084,004546173,006786460,006588567,000131072,003358792,003358792,000131072,003166111,003891819,004086670,000131072,002445910,003044504,005202101,006391187,006391187,002105392,003226435,002180461,007174271,005079180,004480379,006391187,006391187,002184045,004938669,000131072,006522773,002105392,003358535,007369333,006121067,003887467,000131072,006522773,006522773,002576731,004744067,000131072,006522773,002105392,003358535,000131072,006187117,002983063,005009582,006983839,006983839,002846095,004741028,000131072,007049889,003424328,003358535,006983839,000131072,001988965,003823721,000131072,003044504,003303539,004348535,007181732,007247526,002105392,003358535,007049889,007049889,000131072,001853277,002840931,003237489,003308964,000131072,007576749,007576749,002105392,003358535,007840435,007840435,007906485,007906485,000131072,000131072,000131072,007972279,007972279,007972279,002105392,003753034,008170172,008170172,008170172,008104122,000131072,008170172,008104122,008038328,008038328,007972279,000131072,003358792,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358792,003358792,003358792,003358792,003753034,003358792,003752777,003358535,003358792,003358792,003358792,003358792,003753034';
        End;

     8: Begin //This is Zamorak godsword
         unnotedItem := '003358535,003358535,003358535,003358535,003752777,003358535,000131072,000131072,002105392,000131072,000131072,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,000131072,000131072,000131072,002105392,003358535,003358535,003358535,000131072,003358535,003358535,003358535,000131072,005591377,000131072,002105392,003358535,003160642,003358535,003358535,000131072,000131072,003358535,003358535,005986135,003223343,002895150,003947583,002368549,003358535,003358535,000131072,005854549,005854549,000131072,000725328,000131072,002105392,003358535,000131072,002105392,003358535,003358535,000131072,000131072,009604236,005394255,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,009735565,007104359,005722963,000131072,003358535,003358535,003358535,003358535,003160642,003358535,008749183,008419962,000131072,002105392,005854549,005591377,002105392,003358535,003358535,003358535,003358535,008551548,009012099,000131072,002105392,000131072,005854549,005262669,003358535,003358535,003358535,003358535,003358535,008551548,009143685,002105392,003358535,003358535,002105392,003358535,003358535,003358535,003358535,003358535,003358535,000131072,002105392,003160642,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,009933201,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,000131072,000131072,003752777,003358535,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003752777,003358535,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003160642,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
         notedItem := '000131072,000131072,000131072,006917788,006851739,006851739,006917788,006917788,006917788,000131072,003358535,003358535,006654359,006654359,006654359,006654359,006785945,006785945,006785945,006851739,006851739,000131072,003358535,003358535,006456466,006522516,006522516,006588565,006588565,006654359,006654359,000131072,006785945,000131072,003358535,003160642,006390672,006390672,006456466,006588565,006785945,000131072,000131072,002895150,006851739,000131072,003160642,003358535,007049632,007049632,005262669,000131072,007049632,008749183,002565928,000131072,007049632,002105392,003358535,003358535,007049632,007049632,005722963,005722963,000725070,000131072,006917788,000131072,006522516,000131072,003358535,003358535,006851739,006654359,005722963,008288376,004670275,006390672,006390672,006390672,006390672,006390672,002105392,003160642,006456466,000131072,008551548,007367531,000131072,005394255,006456466,006456466,006522516,006456466,002105392,003358535,000131072,008025461,000131072,006456466,000131072,006522516,006522516,006522516,006588565,006522516,002105392,003358535,008749183,000131072,006785945,006983838,006983838,006983838,006983838,006983838,006983838,006983838,003358535,003358535,000131072,010064530,000131072,006983838,006983838,007049632,007049632,007115682,007115682,007247011,002105392,003358535,006983838,007049632,000131072,007115682,007313061,007378855,007444904,007510698,007510698,007510698,002105392,003358535,007708591,007774384,007774384,007774384,007774384,007905970,007905970,007905970,007905970,007905970,002105392,003752777,008169657,008169657,008103607,008103607,000131072,008169657,008103607,008037813,008037813,007971764,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
        End;

     9: Begin //This is Dragonfire shield
         unnotedItem := '003358792,003358792,003358792,003424328,003752777,003358535,003160642,003358535,003358535,000131072,003358535,003358535,003358535,003358792,003358792,003424328,003358535,000131072,000131072,000131072,000131072,004892652,000131072,003358535,003358535,003358792,003358792,003424328,000131072,003306146,000264478,004892652,000925538,004099271,000131072,003160642,003358792,003358792,003358792,000131072,002776967,000264219,000330530,000925536,000859741,004810882,000131072,003358792,003358535,003358792,004099271,000330530,000330789,000330789,000330789,001454229,000793687,004612988,002105392,003358535,000925536,004033220,000396584,000855310,000855310,000396584,001192828,000661321,000462897,003295065,002105392,003358535,002843017,000727376,000397102,000855310,000855310,000396584,000859483,000462897,003756646,002504516,002105392,003160643,002247788,000463156,000462897,000855310,000855310,000396584,000661321,000462897,003756646,002105392,003358536,003358536,000396844,002380404,000595266,002380404,000463156,000991592,000397102,003492701,003492701,002105392,003358536,003358792,001520971,000264478,000528695,000793170,000529212,000859225,000925796,003492701,002105392,003358536,003424328,003424328,001851483,000727376,000661321,000595266,000528695,000793429,003492701,002105392,003358535,003358535,003358535,003358535,000925536,000727115,000661063,000529212,001851225,000131072,002105392,003358535,003358535,003358535,003358535,003358535,000727376,000727374,002975376,000396584,000131072,002105392,003358535,003358535,003358535,003752777,003358535,003752777,000793170,000727374,003492701,000131072,002105392,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,000131072,000131072,002105392,003752777,003358535,003358535,003358535,003358535,003358535,003160642,003358535,002105392,003358792,003358792,003753034,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
         notedItem := '000131072,000131072,000131072,006785945,006654359,006654359,006785945,006785945,006785945,000131072,003358535,003358535,006522516,006522516,006522516,006522516,006588565,006588565,006588565,006654359,006654359,000131072,003358535,003358535,006259086,006390672,006390672,006456466,006456466,006522516,000131072,000131072,006588565,000131072,003358535,003160642,006193293,006193293,006259086,006456466,000131072,000131072,000859483,004826858,006654359,000131072,003160642,003358792,006983838,006983838,006983838,000131072,001388176,003306146,001057644,005931168,006917788,002105392,003358535,003358535,006917788,006983838,000131072,000396844,000859225,000330789,001322381,005008519,006390672,000131072,003358535,003358535,006654359,003306146,000396844,000855310,000855310,000925538,000528695,003361115,006193293,006193293,002105392,003160643,001322123,002380404,000462897,000855310,000855310,000793429,000463156,000131072,006390672,006259086,002105392,003358536,001322123,000396844,000528954,000991592,000661321,000528695,000925536,006390672,006456466,006390672,002105392,003358792,000859741,002181994,000925538,000661063,000529212,000131072,006851739,006851739,006851739,006851739,003424328,003424328,001123700,000991592,000793429,000595007,000131072,006917788,006917788,006983838,006983838,007049632,002105392,003358535,004694499,000793687,003756646,000396844,007115682,007247011,007313061,007378855,007378855,007444904,002105392,003358535,000131072,000131072,007708591,007774384,007774384,007774384,007905970,007905970,007905970,007905970,002105392,003752777,008103607,008103607,008103607,008037813,000131072,008103607,008037813,008037813,007971764,007971764,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003358792,003358792,003753034,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
        End;

     10: Begin //This is Ragefire boots
         unnotedItem := '003358535,003358535,003358535,003358535,003752777,003358535,003160642,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,006579039,006579039,006447710,003358535,003358535,003358535,000131072,003358535,003358535,003358535,000131072,006579039,002629410,002629410,003415332,006447710,003358535,003160642,004339506,004668214,001970453,005982013,004339506,002432287,002234908,002889758,002889758,004539714,002105392,003358535,001249810,004142385,004339506,002629410,003945262,001971993,001774870,001511955,002233111,004539714,002105392,003358535,000921101,003813676,003813676,002234908,003222054,003024676,001511955,000920846,004934472,000131072,003358535,003358535,000921101,003222054,001247757,002630175,002630175,001971988,005065286,004737093,006447710,000131072,003358535,003160642,000921101,002893089,006315611,000919562,000920587,000131072,008618877,008684414,001249810,001776154,000131072,003358535,005986904,004799800,000131072,000131072,000131072,004471092,002432287,002432287,003021344,003021344,004605507,002105392,001249810,001249810,004339506,001970453,005718842,003813676,001971993,001971993,001971993,002430234,004605507,002105392,000921101,001249810,003813676,003945262,004798513,003419176,001774870,001511955,001511955,004999495,000131072,003358535,000921101,000921101,003419176,003222054,002893089,003024676,002630175,000920846,004802886,004605507,002105392,003358535,000921101,000921101,002893089,000919562,001972759,000920846,001248780,004473920,004473920,004605507,002105392,003752777,004671044,006645089,006052696,000131072,000131072,002105392,002105392,004473920,000131072,000131072,003358535,003358535,000131072,004671044,002105392,002105392,003752777,003358535,003358535,000131072,000131072,002105392,003160642,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,002105392,003358535,003358535,003752777';
         notedItem := '000131072,000131072,000131072,006851739,006851739,006851739,006851739,006851739,006851739,000131072,003358535,003358535,006588565,006588565,006654359,006654359,006654359,006654359,006785945,006785945,006785945,000131072,003358535,003358535,006456466,006456466,006522516,006522516,006588565,006588565,000131072,006654359,006654359,000131072,003358535,003160642,006259086,006390672,006390672,006522516,000131072,006645089,006513503,000131072,006785945,000131072,003160642,003358535,000131072,000131072,000131072,000131072,004339506,002432287,003218466,006513503,007049632,002105392,003358535,003358535,007566190,001249810,004471092,002629410,003616298,001971993,001511955,004473920,006522516,000131072,003358535,003358535,000921101,000921101,003616298,001774870,003024676,001511955,004671044,000131072,006390672,006390672,002105392,003160642,005987158,000921101,002630175,000919562,000920587,004276286,008684671,001973533,006456466,006456466,002105392,003358535,006259086,008618877,004799800,002233111,004668214,002234908,001971993,002889758,000131072,006456466,002105392,003358535,000131072,000921101,003945262,003813676,004667183,001774870,001511955,004933702,000131072,006917788,003424327,003358535,006917788,000921101,003222054,001247757,002235418,001774866,004802886,004539714,007049632,007115682,002105392,003358535,002236961,004605507,005855574,000131072,000131072,000131072,004408128,000131072,007444904,007444904,002105392,003358535,007708591,007708591,007774384,007774384,007774384,007774384,000131072,007905970,007905970,007905970,002105392,003752777,008103607,008103607,008103607,008103607,000131072,008169657,008103607,008037813,008037813,007971764,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
     End;

     11: Begin //This is Armadyl helmet
         unnotedItem := '003358535,003358535,003358535,003358535,003752777,003358535,003160642,003358535,003358535,003358535,003358535,003358535,003358535,003358535,000131072,000131072,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,003358535,013748424,014340561,014274767,003358535,003358535,003358535,003358535,003358535,003358535,003160642,003358535,003358535,000131072,014537940,014340561,013748424,003752777,003358535,003358535,000131072,005587760,003358535,003358535,003358535,003358535,000131072,014340561,014274767,013287873,005259053,005587760,005850674,007231294,002105392,009275014,009735565,000131072,003358535,002472189,002472189,002338800,005982259,006113845,007625793,007888708,002105392,012432821,010196116,009143685,004799793,004668207,002472189,002472189,001937605,006705209,007757122,007494208,002105392,012959165,013156543,011183010,012367028,005720378,011511719,001403022,000936292,007099709,006836795,000131072,002105392,000131072,001938120,011314340,012630200,005851964,005128500,010722460,011380390,002472189,002472189,000131072,003358535,003358535,000131072,010656666,013090494,005983293,005128500,004471086,010064530,009012099,011380390,000131072,003358535,003358535,003358535,002405881,013748424,002472189,002339315,002205154,002432535,003221276,010064530,000131072,003358535,003358535,003358535,000131072,013090494,002472189,016629071,002338800,001775122,005591377,006315099,002105392,003358535,003358535,003358535,003358535,000131072,012893115,001002600,002471931,012959165,000131587,005394255,000131072,003752777,003358535,003358535,003358535,003358535,000131072,002405366,002338285,002271977,001870783,000131072,002105392,003358535,003358535,003752777,003358535,003358535,003752777,003358535,002004686,002071508,001871812,001737136,002105392,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,002105392,000131072,000131072,002105392,003752777';
         notedItem := '000131072,000131072,000131072,006785945,006785945,006785945,006785945,006785945,006785945,000131072,003358535,003358535,006522516,006522516,006588565,006588565,006588565,006654359,006654359,006654359,006785945,000131072,003358535,003358535,006390672,006456466,006456466,006522516,006522516,006522516,006588565,006588565,006654359,000131072,003358535,003160642,006193293,006259086,012893115,000131072,006588565,006785945,006785945,006785945,006785945,000131072,003226434,003358535,006983838,006983838,000131072,014077389,013353922,006983838,006983838,000131072,006983838,002105392,003424327,003358535,006983838,006983838,006983838,000131072,014077389,013353922,005259053,005850674,000131072,000131072,003424327,003358535,012564407,011183010,008880513,003813415,012630200,002472189,004338725,007625793,000131072,006259086,002105392,003160642,000131072,012564407,012761786,010985375,004668207,001336457,002271720,006705209,000131072,006390672,002105392,003358535,006193293,000131072,001937605,012367028,005851964,004471086,010854046,010985375,000131072,006390672,002105392,003358535,006588565,006588565,000131072,013485252,002472189,002138332,002892312,009604236,000131072,006917788,003358535,003358535,006851739,006851739,006851739,002405108,012630200,002472189,000394759,005722963,000131072,007115682,002105392,003358535,006917788,006917788,006983838,007049632,000131072,002205411,002271977,000131072,007444904,007444904,002105392,003358535,007708591,007708591,007774384,007774384,007774384,000131072,000131072,001737394,000131072,007905970,002105392,003752777,008103607,008103607,008103607,008103607,000131072,008169657,008103607,008037813,008037813,007971764,000131072,003358535,000131072,000131072,000131072,000131072,002105392,000131072,002105392,002105392,002105392,002105392,002105392,003358535,003358535,003358535,003358535,003752777,003358535,003752777,003358535,003358535,003358535,003358535,003358535,003752777';
     End;

     Else  //This is default, so that nothing matches
     Begin
         unnotedItem
         notedItem := '000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000,000000000';
     End;
     End;

      notedDiff := 0;
      unnotedDiff := 0;
      pixelCount := 0;
      n := 0;

      for x_temp := inventoryBox.x1 to  inventoryBox.x2   do
      begin
                  for y_temp := (inventoryBox.y1 + 9) to  inventoryBox.y2   do
                  begin
                            if(((y_temp MOD 2) = 0 ) and ((x_temp MOD 2) = 0))  then
                            begin
                                /////////////////////////////////////////////
                               nthStrUnnoted := Copy(unnotedItem,(1 + n*10) ,9 );
                               nthStrNoted := Copy(notedItem,(1 + n*10) ,9 );
                               /////////////////////////////////////////////
                               intermediateInt := StrToInt(nthStrNoted)- GetColor(x_temp,y_temp);
                               if (intermediateInt < 0)     then begin
                                      intermediateInt := -intermediateInt;
                               end;
                               notedDiff := notedDiff +  intermediateInt ;
                               ////////////////////////////////////////
                               intermediateInt := StrToInt(nthStrUnnoted)- GetColor(x_temp,y_temp);
                               if (intermediateInt < 0)     then begin
                                      intermediateInt := -intermediateInt;
                               end;
                               unnotedDiff := unnotedDiff +  intermediateInt ;
                               ////////////////////////////////////////////
                               n := n + 1;
                            end;
                  end;
      end;
      if ((notedDiff < errorThreshold) or (unnotedDiff < errorThreshold))  then begin
             if (clickItem) then
             begin
                MouseBox(inventoryBox.X1,inventoryBox.Y1, inventoryBox.X2, inventoryBox.Y2,1);
             end;
             Result := true;
      end else begin
             Result := false;
      end;
end;

 //This function is going to iterate through all inventory spots and count
 //how many we have of a given item...
 function countNumItems(itemID_in: integer): integer;
 var
    i: integer;
    item_total: integer;
 begin
    item_total := 0;
    for i := 1 to 13 do
    begin
         if (isItemInInvSpot(i,itemID_in, false)) then
         begin
               item_total := item_total + getAmountBox(invBox(i));
         end;
    end;
    Result := item_total;
 end;

 function isItemInInv(itemID: integer; clickItem: boolean): boolean;
 var
   I: integer;
   found_item: boolean;
 begin

    found_item := false;

    //Only loop through 12 slots
    for I:=1 to 13 do
    begin
       if(isItemInInvSpot(I,itemID, clickItem))then
       begin
           found_item := true;
       end;
    end;


 if(found_item)then
 begin
    Result := true;
 end else
 begin
    Result := false;
 end;
 end;

 procedure clickTheItem(itemID: integer; clickItem: boolean);
 begin
     isItemInInv(itemID, clickItem);
  end;

 function findItemAmt(noted_dtm: integer): integer;
 var
   item_amt, x, y: integer;
 begin
  item_amt := 0;
     if(ExistsItemDTM(noted_dtm, x, y))then
      begin
             // we have found that the noted DTM is in our inventory
             item_amt := GetAmount(x, y);

      end else begin
          item_amt := 0;
      end;
         writeln(item_amt);

  Result := item_amt;
 end;

//TODO: ensure that we have clicked an item in the inventory.
//TODO: replace "spot" parameter with "name_in," to pass to the FindItemInv Function
//sell all of the items in the second inventory slot at the specified price
function MakeSellOffer(price_in, spot, itemID: integer): integer;
var
i, j: integer;
Price: string;
return_val: integer;
begin

    return_val := 0;

    Price := inttoStr(price_in);
    Writeln('attempting to sell an item');
    wait(5000 + Random(500));
    //if its not in the GE, try to open it; if that doesn't work then close
    if  not isGEOpen then OpenGE;

    //check to make sure that the slot is empty, if we can't empty, then exit
    if not GEIsSpotFree(spot) then
    begin
       if isGEOpen then abortandcollect(spot,true);
       wait(4000 + Random(500));
    end;

    Writeln('about to enter the sell screen');
    //check to make sure that we are in an empty sell screen
    i := 0;
    While ((not isSellScreenOpen) and (i < 3)) do
    begin
        if isGEOpen then ClickSellSlot(spot);
        Wait(7000 + Random(3000));
        i := i + 1;
    end;

               //click on the item
               if isGEOpen then clickTheItem(itemID, true);
               Wait(5000 + Random(3000));

               //Checks the little gold stack in hand to move
                if((GetColor(115,139) <> 16187134)and(GetColor(117,137) <> 29364)) then //make sure we clicked on the item
               begin

               //click to sell "all"
               if isGEOpen then Mouse(183, 212, 24, 17, true);
               Wait(3000 + Random(3000));
               return_val := find_sell_quantity;

               if (return_val > 0) then
               begin

               //MAKE SURE THAT WE HAVE THE DIALOG UP BEFORE TYPING
               //MISSING ONE CHARACTER COULD COST UP TO 10M loss!
               //click on the price button to specify price
               Wait(4000+Random(3000));

               for j:=0 to 10 do
               begin
               if((GetColor(505,452) = 2041132) or (GetColor(504,348) = 1185048)) then
               begin
                if isGEOpen then Mouse(370, 212, 32, 21, true);
                Wait(1000 + Random(500));
               end;
               end;

               //Adding an additional wait here so that we don't miss typing any numbers
               Wait(3350+ Random(1275));

               if isGEOpen then TypeSend(lowercase(Price));
               Wait(4000 + Random(3000));
               //confirm offer
               if isGEOpen then Mouse(207, 280, 110, 32, true);

               //make sure we wait atleast 2 seconds, would look inhuman.
               Wait(2000 + Random(500));

               //continue to pause until sell screen is not visible.
               for i:= 0 to 10 do
               begin
                  if (not isSellScreenOpen) then
                    break;
                  wait(500 + Random(200));
               end;

               end;
               wait(2000+Random(500));

               end;
           EnsureMainGE;
           Result := return_val;
end;
